CODE:

import pandas as ps
path="C:\\Users\\shiva\\OneDrive\\Desktop\\loanpredictiondataset\\train.csv"
data=ps.read_csv(path)

print(data)
print(data.info())

medianval = data.LoanAmount.median()    # to change the value of NaN
print(medianval)
data['LoanAmount']= data.LoanAmount.fillna(data.LoanAmount.median())

medianval = data.Credit_History.median()    # to change the value of NaN
print(medianval)
data['Credit_History']= data.Credit_History.fillna(data.Credit_History.median())


medianval = data.Loan_Amount_Term.median()    # to change the value of NaN                            
print(medianval)
data['Loan_Amount_Term']= data.Loan_Amount_Term.fillna(data.Loan_Amount_Term.median())

import sklearn      #importing
from sklearn.preprocessing import LabelEncoder  # which is used to the encode the values 
la_Property_Area=LabelEncoder()                        # which used to transfrom the values of specific column of company 
la_Loan_Status=LabelEncoder()
la_Gender=LabelEncoder()
la_Married=LabelEncoder()
la_Education=LabelEncoder()
la_Self_Employed=LabelEncoder()

data['Property_Area_n']=la_Property_Area.fit_transform(data['Property_Area'])
data['Loan_Status_n']=la_Property_Area.fit_transform(data['Loan_Status'])
data['Gender_n']=la_Property_Area.fit_transform(data['Gender'])
data['Education_n']=la_Property_Area.fit_transform(data['Education'])
data['Self_Employed_n']=la_Property_Area.fit_transform(data['Self_Employed'])
data['Married_n']=la_Property_Area.fit_transform(data['Married'])

inputs = data.drop(['Loan_ID','Loan_Status','Loan_Status_n','Property_Area','Gender','Education','Self_Employed','Married','Dependents'],'columns')
output = data.drop(['Married_n','Self_Employed_n','Education_n','Gender_n','Property_Area_n','Loan_Status','Loan_ID','Gender','Married','Dependents','Education','Self_Employed','ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term','Credit_History','Property_Area'],'columns')
print("inputs:",inputs)
print("output:",output)

import sklearn 
from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(inputs,output,test_size=0.2)
print("x_train :",x_train)
print("x_test:",x_test)
print("y_train:",y_train)
print("y_test:",y_test)

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors=1)
model.fit(x_train,y_train)
y_pred = model.predict(x_test)
print("y_pred:",y_pred)
print("y_test:",y_test)

from sklearn.metrics import confusion_matrix      #using confusion matrix the acc is calculated
cm=confusion_matrix(y_test,y_pred)
print("cm:",cm)

acc=model.score(inputs,output)*100
print("acc :",acc)



OUTPUT:
cm: [[14 25]
 [26 58]]
acc : 91.69381107491856



PYQIT CODE:

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'lo.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(926, 804)
        Form.setStyleSheet("font: 12pt \"MV Boli\";")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(330, 30, 251, 41))
        self.label.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(0, 0, 0);\n"
"font: 75 14pt \"Palatino Linotype\";")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(30, 120, 181, 41))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(30, 170, 201, 51))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(30, 230, 201, 51))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(30, 280, 241, 51))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setGeometry(QtCore.QRect(30, 330, 201, 51))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setGeometry(QtCore.QRect(30, 390, 201, 51))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(Form)
        self.label_8.setGeometry(QtCore.QRect(30, 440, 201, 51))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(Form)
        self.label_9.setGeometry(QtCore.QRect(30, 490, 201, 51))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(Form)
        self.label_10.setGeometry(QtCore.QRect(30, 550, 201, 51))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(Form)
        self.label_11.setGeometry(QtCore.QRect(30, 610, 201, 51))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(Form)
        self.label_12.setGeometry(QtCore.QRect(30, 730, 201, 51))
        self.label_12.setObjectName("label_12")
        self.ain = QtWidgets.QLineEdit(Form)
        self.ain.setGeometry(QtCore.QRect(220, 130, 211, 31))
        self.ain.setObjectName("ain")
        self.cin = QtWidgets.QLineEdit(Form)
        self.cin.setGeometry(QtCore.QRect(230, 180, 211, 31))
        self.cin.setObjectName("cin")
        self.lam = QtWidgets.QLineEdit(Form)
        self.lam.setGeometry(QtCore.QRect(190, 240, 211, 31))
        self.lam.setObjectName("lam")
        self.lamt = QtWidgets.QLineEdit(Form)
        self.lamt.setGeometry(QtCore.QRect(250, 290, 211, 31))
        self.lamt.setObjectName("lamt")
        self.ch = QtWidgets.QLineEdit(Form)
        self.ch.setGeometry(QtCore.QRect(200, 340, 211, 31))
        self.ch.setObjectName("ch")
        self.pan = QtWidgets.QLineEdit(Form)
        self.pan.setGeometry(QtCore.QRect(220, 400, 211, 31))
        self.pan.setObjectName("pan")
        self.gn = QtWidgets.QLineEdit(Form)
        self.gn.setGeometry(QtCore.QRect(150, 450, 211, 31))
        self.gn.setObjectName("gn")
        self.edn = QtWidgets.QLineEdit(Form)
        self.edn.setGeometry(QtCore.QRect(180, 500, 211, 31))
        self.edn.setObjectName("edn")
        self.sen = QtWidgets.QLineEdit(Form)
        self.sen.setGeometry(QtCore.QRect(210, 560, 211, 31))
        self.sen.setObjectName("sen")
        self.mn = QtWidgets.QLineEdit(Form)
        self.mn.setGeometry(QtCore.QRect(160, 620, 211, 31))
        self.mn.setObjectName("mn")
        self.loss = QtWidgets.QLineEdit(Form)
        self.loss.setGeometry(QtCore.QRect(190, 740, 211, 31))
        self.loss.setObjectName("loss")
        self.button = QtWidgets.QPushButton(Form)
        self.button.setGeometry(QtCore.QRect(510, 670, 201, 51))
        self.button.setObjectName("button")
        self.button.clicked.connect(self.lon)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
    def lon(self):
        import pandas as ps
        path="C:\\Users\\shiva\\OneDrive\\Desktop\\loanpredictiondataset\\train.csv"
        data=ps.read_csv(path)

        print(data)
        print(data.info())

        medianval = data.LoanAmount.median()    # to change the value of NaN
        print(medianval)
        data['LoanAmount']= data.LoanAmount.fillna(data.LoanAmount.median())

        medianval = data.Credit_History.median()    # to change the value of NaN
        print(medianval)
        data['Credit_History']= data.Credit_History.fillna(data.Credit_History.median())


        medianval = data.Loan_Amount_Term.median()    # to change the value of NaN                            
        print(medianval)
        data['Loan_Amount_Term']= data.Loan_Amount_Term.fillna(data.Loan_Amount_Term.median())

        import sklearn      #importing
        from sklearn.preprocessing import LabelEncoder  # which is used to the encode the values 
        la_Property_Area=LabelEncoder()                        # which used to transfrom the values of specific column of company 
        la_Loan_Status=LabelEncoder()
        la_Gender=LabelEncoder()
        la_Married=LabelEncoder()
        la_Education=LabelEncoder()
        la_Self_Employed=LabelEncoder()

        data['Property_Area_n']=la_Property_Area.fit_transform(data['Property_Area'])
        data['Loan_Status_n']=la_Property_Area.fit_transform(data['Loan_Status'])
        data['Gender_n']=la_Property_Area.fit_transform(data['Gender'])
        data['Education_n']=la_Property_Area.fit_transform(data['Education'])
        data['Self_Employed_n']=la_Property_Area.fit_transform(data['Self_Employed'])
        data['Married_n']=la_Property_Area.fit_transform(data['Married'])

        inputs = data.drop(['Loan_ID','Loan_Status','Loan_Status_n','Property_Area','Gender','Education','Self_Employed','Married','Dependents'],'columns')
        output = data.drop(['Married_n','Self_Employed_n','Education_n','Gender_n','Property_Area_n','Loan_Status','Loan_ID','Gender','Married','Dependents','Education','Self_Employed','ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term','Credit_History','Property_Area'],'columns')
        print("inputs:",inputs)
        print("output:",output)
        
        inputApplicantIncome = self.ain.text()
        inputCoapplicantIncome = self.cin.text()
        inputLoanAmount = self.lam.text()
        inputLoan_Amount_Term = self.lamt.text()
        inputCredit_History = self.ch.text()
        inputProperty_Area_n = self.pan.text()
        inputGender_n = self.gn.text()
        inputEducation_n = self.edn.text()
        inputSelf_Employed_n = self.sen.text()
        inputMarried_n = self.mn.text()

        import sklearn 
        from sklearn.model_selection import train_test_split

        x_train,x_test,y_train,y_test = train_test_split(inputs,output,test_size=0.2)
        print("x_train :",x_train)
        print("x_test:",x_test)
        print("y_train:",y_train)
        print("y_test:",y_test)

        from sklearn.neighbors import KNeighborsClassifier
        model = KNeighborsClassifier(n_neighbors=10)
        model.fit(x_train,y_train)
        y_pred = model.predict(x_test)
        res=model.predict([[int(inputApplicantIncome),float(inputCoapplicantIncome),float(inputLoanAmount),float(inputLoan_Amount_Term),float(inputCredit_History),int(inputProperty_Area_n),int(inputGender_n),int(inputEducation_n),int(inputSelf_Employed_n),int(inputMarried_n)]])                                             
        print("res :",res)
        
        self.loss.setText(str(res))

        print("y_pred:",y_pred)
        print("y_test:",y_test)

        from sklearn.metrics import confusion_matrix      #using confusion matrix the acc is calculated
        cm=confusion_matrix(y_test,y_pred)
        print("cm:",cm)

        acc=model.score(inputs,output)*100
        print("acc :",acc)



    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "   LOAN PREDICTION"))
        self.label_2.setText(_translate("Form", "ApplicantIncome :"))
        self.label_3.setText(_translate("Form", "CoapplicantIncome :"))
        self.label_4.setText(_translate("Form", "LoanAmount :"))
        self.label_5.setText(_translate("Form", "Loan_Amount_Term :"))
        self.label_6.setText(_translate("Form", "Credit_History :"))
        self.label_7.setText(_translate("Form", "Property_Area_n :"))
        self.label_8.setText(_translate("Form", "Gender_n :"))
        self.label_9.setText(_translate("Form", "Education_n :"))
        self.label_10.setText(_translate("Form", "Self_Employed_n :"))
        self.label_11.setText(_translate("Form", "Married_n :"))
        self.label_12.setText(_translate("Form", "Loan_Status_n :"))
        self.button.setText(_translate("Form", "PREDICT"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())


